@startuml

abstract class Observable {
    #bool isChanged

    +addObserver()
    +deleteObserver()
    +setChanged()
    +notifyObservers()
}

class TimeManager {
    -static TimeManager instance
    -static int tickDelay
    -Timer timer

    +static TimeManager getInstance()
    +void tick()
    +static void setTickDelay()
    +static void startTick()
    +static void stopTick()
}

interface Observer {
    +update()
}

abstract class Container {
    -int idGenerator
    #int id
    #String name
    #Container parent
    #Date initialDate
    #Date finalDate
    #int totalTime

    -void generateNewId()
    +int getId()
    +String getName()
    +Container getParent()
    +abstract int getTotalTime()
    +abstract Date getInitialDate()
    +abstract Date getFinalDate()
    +void setTotalTime()
    +void setInitialDate()
    +void setFinalDate()
    +setParent()
    +abstract void printChanged()
    +abstract String toString()
}

class Project {
    +void addChild()
    +int getTotalTime()
    +Date getInitialDate()
    +Date getFinalDate()
    +ArrayList<Container> getChildren()
    -void updateTimeData()
    +void printSubTree()
    +TreeIterator createIterator()
    +void printChanged()
    +toString()
}

class Task {
    -boolean isRunning

    +int getTotalTime()
    +Date getInitialDate()
    +Date getFinalDate()
    -void updateTimeData()
    +void setTotalTime()
    +void setInitialDate()
    +void setFinalDate()
    +void update()
    +void start()
    +void stop()
    +ArrayList<Interval> getIntervals()
    +void addInterval()
    +void printChanged()
    +toString()
}

class Interval {
    -int idGenerator
    -int id
    -Task parent
    -int totalTime
    -Date initialDate
    -Date finalDate

    -void generateNewId()
    +Task getParent()
    +void setParent()
    +int getTotalTime()
    +Date getInitialDate()
    +Date getFinalDate()
    +void setTotalTime()
    +void setInitialDate()
    +void setFinalDate()
    +String toString()
}

class PersistenceManager {
    -Project root

    +Project getRoot()
    +void setRoot()
    +void TreeToJson()
    +void JsonToTree()
    -JSONObject jsonObjFromData()
}

interface Iterator {
    +first()
    +next()
    +hasNext()
    +getElement()
}

class TreeIterator {
    -Project root
    -Container currentElement

    +first()
    +next()
    -Container getNextContainer()
    +hasNext()
    +getElement()
}


interface SearchStrategy {
    +search(Project root, Object filter)
}

class SearchByTag {
    -SearchByTag instance

    +getInstance()
    +search(Project root, Object filter)
}


/'
class ContainerTree {
    -int id
    -Core.Project root
    +int getId()
    +Core.Project getRoot()
    +void addContainer(arg0: newContainer, arg1: parent)
    +Core.Container findContainerById()
    +void TreeToJson()
    +void JsonToTree()
}
class Invoker {
    +void addCommand()
    +void executeCommand()
    +void tick()
}
interface Command {
    +void execute()
}
object FlutterClient {
    ...
}
object WebServer {
    ...
}
class AddContainerCommand {
    -ContainerTree tree
    -Core.Project parent
    -Core.Container newContainer
    +void execute()
}
class StartTaskCommand {
    -Observable timeManager
    -Core.Task task
    +void execute()
}
class EndTaskCommand {
    -Observable timeManager
    -Core.Task task
    +void execute()
}
class GetTreeCommand {
    -ContainerTree tree
    -WebServer response
    +void execute()
}
class OtherCommands {
    ...
    +void execute()
}
'/



Container "1" --> "     1" Container
Container <|-- Task
Container <|-- Project
Task *-- "0..* " Interval
Project "0..*" *--  Container
Observable <|-- TimeManager
TimeManager "1 " --> "1 " TimeManager
Observer <|.. Task
Observable *-- "0..*  " Observer
Project "1 " <-- "1" PersistenceManager
Iterator <|.. TreeIterator
TreeIterator "1 " --> "1 " Project
TreeIterator "1" --> "0..1  " Container
Project ..> TreeIterator
PersistenceManager ..> TreeIterator
SearchStrategy <|.. SearchByTag
Project "1 " --> "1 " SearchStrategy
SearchByTag "1 " --> "1 " SearchByTag
/'
Invoker o-- Command
FlutterClient ..> WebServer
WebServer ..> Invoker
Command <|.. AddContainerCommand
Command <|.. StartTaskCommand
Command <|.. EndTaskCommand
Command <|.. GetTreeCommand
Command <|.. OtherCommands
AddContainerCommand --> ContainerTree
GetTreeCommand --> ContainerTree
'/
'GetTreeCommand --> WebServer
'StartTaskCommand --> Observable
'EndTaskCommand --> Observable

/'
note left of Core.TimeManager::tick
  Ejecuta en un segundo Thread.
  - Comprueba si el tiempo que ha pasado
  es mayor o igual que "timeToUpdate".
  - Ejecuta "setChanged()" en caso que si.
  - Ejecuta "notifyObservers()"
end note
'/
/'
note left of Invoker::tick
  Ejecuta en el Thread principal.
  - Ejecuta todos los comandos que han llegado del WebServer
end note
'/

@enduml